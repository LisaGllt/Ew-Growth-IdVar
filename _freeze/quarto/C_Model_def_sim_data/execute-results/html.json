{
  "hash": "52527107e37969b029116575f157a664",
  "result": {
    "engine": "knitr",
    "markdown": "\n\n\n\n\n# A model for earthworm growth and its individual variation\n\n## Model definition\n\nTo evaluate individual variations in growth and fungicide sensitivity parameters, a simplified version of the bioenergetic model from @bart_2020a was developed.\n\nWe used an individual reaction norm approach [@dingemanse_2013] to compare growth rate across exposed and non-exposed individuals. As indicated by [@bart_2020a], *A. caliginosa* growth is approximately linear with the structural volumetric length $L$ during the juvenile phase of the life-cycle. This structural volumetric length can be calculated as the cubic root of the wet weight of the organisms.\n\nHere, we assume that both cohorts can have a different growth rate $a$ (mg$^{1/3}$/d). We suppose the structural volumetric length at the start of the experiment ($L0$) does not depend on the treatment as individuals came from the same pool of individuals.\n\nTo take individual variations for both parameters, we assume that each parameter can be considered as a random variable described by a normal distribution whose mean is the population-level value of the parameter and the standard deviation is the individual variation of the parameter. Each individual can then have a parameter value that is taken from this normal distribution.\n\nThis gives us @eq-growth.\n\n$$\n\\begin{aligned}\nL_{c,i} &\\sim \\mathcal{N}(L_{\\mu,c,i}, \\sigma_L)\\\\\nL_{\\mu,c,i}(t)&=L0_i+a_{c,i}\\times t \\\\\n\\text{With}\\\\\nL0_{i} &\\sim \\mathcal{N}(L0_{\\mu}, L0_{\\sigma})\\\\\na_{c,i} &\\sim \\mathcal{N}(a_{c,\\mu}, a_{c,\\sigma})\n\\end{aligned}\n$$ {#eq-growth}\n\nWith :\n\n-   $i$ : the individual under a certain exposure $(i \\in [\\![1,60]\\!]),$\n-   $c$ : the exposition concentration (0 or 3 RD),\n-   $L_{c,i}(t)$ : the cubic root of the wet body weight of individual i exposed to the concentration $c$ at a given time $t$ (mg$^{1/3}$),\n-   $L_{\\mu,c,i}(t)$ : the expected cubic root of the wet body weight of individual $i$ exposed to the concentration $c$ at time $t$,\n-   $\\sigma_L$ : standard deviation of residuals on $L_{c,i}$, representing the variability not captured by the growth model,\n-   $L0_i$ : the cubic root of the wet body weight at t=0 (mg$^{1/3}$),\n-   $a_{c,i}$ : the growth rate (mg$^{1/3}$/d) of the individual $i$ exposed to the concentration $c$,\n-   $L0_{\\mu}$ : mean of the normal distribution for the initial wet body weight ($L0_i$),\n-   $L0_{\\sigma}$ : standard deviation of the normal distribution for the initial wet body weight ($L0_i$),\n-   $a_{c,\\mu}$ : mean of the normal distribution for the growth rate ($a_{c,i}$),\n-   $a_{c,\\sigma}$ : standard deviation of the normal distribution for the growth rate ($a_{c,i}$).\n\nOur model is implemented with the `brms` package which means this mathematical formulation translate to the following formula in the `brms` language :\n\n1.  `L  ~ L0+a*t`\\\n2.  `L0 ~ 1 + (1||ID)`\\\n3.  `a  ~ 0 + exposition+(0+exposition||ID)`\n\n-   Ligne 1 specify the general formula for $L$,\n-   Ligne 2 specify there is an intercept plus a random effect of ID on $L0$, in other words that $L0$ is definied by a population mean and inter-individual variation,\n-   Ligne 3 specify that a depend on exposition and that there is a random effect on $a$ that depends on the exposition, in other words that $a$ is definied by a population mean and inter-individual variation and these depend on the exposition.\n\n## Parameter recovery with simulated data\n\nA first step is to look at the parameter recovery with a fit on simulated data.\n\n### Data simulation\n\nAccording to @bart_2020a, earthworm initial size is 2.25 mg$^{1/3}$ ($L0$) and grow at xxx mg$^{1/3}$/day ($a$). Next, we simulate data according to a variation attenuation scenario. To do so, we assume that the average growth rate in earthworms exposed to 3 RD of Swing Gold decreases by 10 % compared to a control cohort, as shown in @bart_2020a. We set the individual variability in the control group to 10% around the average growth rate which is coherent with Bart's data. We set the change in among-individiual variance to 50 %, which would correspond to a moderate effect size of pesticide exposure on growth rate variation.\n\nThis gives us the following simulation parameters :\n\n-   $L0_{\\mu}$ = 2.25 mg$^{1/3}$\n-   $a_{ctrl,\\mu}$ = 0.075 mg$^{1/3}$/d\n-   $a_{trt,\\mu}$ = 0.0675 mg$^{1/3}$/d\n-   $a_{ctrl,\\sigma}$ = 0.0075 mg$^{1/3}$/d\n-   $a_{trt,\\sigma}$ = 0.008775 mg$^{1/3}$/d\n\nIn parallele, the simulated pesticides effect can be expressed with a response ratio (Ln(RR), @eq-LnRR) and a coefficient of variation ratio (Ln(CVi), @eq-LnCVi).\n\n$$\n\\text{Ln}(\\text{RR}) = \\text{Ln}\\left( \\frac{a_{ctrl,\\mu}}{a_{trt,\\mu}} \\right)\n$$ {#eq-LnRR}\n\n$$\n\\text{Ln}(\\text{CVi}) = \\text{Ln}\\left( \\frac{CV_{ctrl}}{CV_{trt}} \\right)\\\\\n$$ {#eq-LnCVi}\n\nWith :\n\n$$\nCV_{x}=\\frac{a_{x,\\sigma}}{a_{x,\\mu}}\n$$\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nnb_ind_sim <- 30                                              # <1>\n\nset.seed(242412)\n\na_ctrl_mu_mu <- 0.075\na_ctrl_mu_sd <- a_ctrl_mu_mu*0.1\na_trt_mu_mu <- 0.0675\na_trt_mu_sd <- a_ctrl_mu_mu*0.1*(1+0.5)\nL0_mu <- 2.25\nL0_sd <- 0.45\n\nList_a_i_ctrl <- rnorm(                                        # <2>\n  nb_ind_sim,                                                  # <2>\n  a_ctrl_mu_mu,                                                # <2>\n  a_ctrl_mu_sd                                                 # <2>\n  )                                                            # <2>\n\nList_a_i_trt <- rnorm(                                         # <3>\n  nb_ind_sim,                                                  # <3>\n  a_trt_mu_mu,                                                 # <3>\n  a_trt_mu_sd                                                  # <3>\n  )                                                            # <3>\n\nList_L0_i <- rnorm(                                            # <4>\n  nb_ind_sim*2,                                                # <4>\n  L0_mu,                                                       # <4>\n  L0_sd                                                        # <4>\n  )                                                            # <4>\n\n\ndf_pop_sim <- data.frame(                                      # <5>\n  ID = seq(1, nb_ind_sim*2, 1),                                # <5>\n  L0_i = List_L0_i,                                            # <5>\n  a_i = c(List_a_i_ctrl, List_a_i_trt),                        # <5>\n  exposition = c(                                              # <5>\n    rep(0, nb_ind_sim),                                        # <5>\n    rep(1, nb_ind_sim)                                         # <5>\n    )                                                          # <5>\n  )                                                            # <5>\n\n# Real pop values \nsim_a_ctrl_mu <- with(subset(df_pop_sim, exposition == 0), mean(a_i))    # <6>\nsim_a_ctrl_sd <- with(subset(df_pop_sim, exposition == 0), sd(a_i))      # <6>\nsim_a_trt_mu <- with(subset(df_pop_sim, exposition == 1), mean(a_i))     # <6>\nsim_a_trt_sd <- with(subset(df_pop_sim, exposition == 1), sd(a_i))       # <6>\nsim_L0_mu <- with(df_pop_sim, mean(L0_i))                                # <6>\nsim_L0_sd <- with(df_pop_sim, sd(L0_i))                                  # <6>\n\nsim_LnRR <- log(sim_a_trt_mu/sim_a_ctrl_mu)                                 # <7>\nsim_LnCVi <- log((sim_a_trt_sd/sim_a_trt_mu)/(sim_a_ctrl_sd/sim_a_ctrl_mu)) # <7>\n\ntmp <- sim_a_trt_sd/sim_a_ctrl_sd\n```\n:::\n\n\n\n\n1.  Number of individuals in each populations.\n2.  Simulation of the growth rates of non exposed individuals.\n3.  Simulation of the growth rates of exposed individuals.\n4.  Simulation of the initial structural length.\n5.  Dataframe with all individuals from both populations. (0 = Non exposed, 1 = Exposed)\n6.  Calculation of the real parameters values in the simulated population.\n7.  Calculation of Ln(RR) and Ln(CVi).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n# Times with weight measurements\nt_values <- seq(0, 56, 14)\n# Approximate error on L\nsd <- 0.1\n\n# Calculation of each earthworm weight at each time point\ndf_sim <- df_pop_sim |> \n  expand_grid(t = t_values) |>   \n  mutate(\n    Lhat = L0_i + a_i * t\n  ) |>   \n  mutate(\n    L = rtruncnorm(n = n(), mean = Lhat, sd = sd, a = 0),\n    w = L^3\n  ) |>\n  mutate(\n    exposition = as.factor(exposition),\n    ID = as.factor(ID)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nalpha_point <- 0.5\nalpha_line <- 0.3\n\np_growth <- ggplot() +\n  \n  geom_line(\n    data=df_sim, \n    aes(\n      x=t, \n      y=w, \n      color=exposition, \n      group=ID\n      ),\n    lwd=0.8, \n    alpha=alpha_line, \n    color = \"grey80\"\n    ) +\n  geom_point(\n    data=df_sim, \n    aes(\n      x=t, \n      y=w, \n      color=exposition, \n      group=ID\n      ),\n    alpha=alpha_point, \n    size=2\n    ) +\n\n\n  facet_wrap(~exposition) +\n  \n  scale_color_manual(\n    values = pal_col, \n    label  = c(\"Non exposed\", \"Exposed\"), \n    name   = \"\"\n    ) +\n  \n  labs(\n    x         = \"Time (days)\", \n    y         = \"Weight (mg)\",\n    title     = \"Growth of simulated individuals\",\n    subtitle  = \"For the <span style = 'color:#5E81AC;'>non exposed</span> \n       and <span style = 'color:#f42404;'>exposed</span> groups\"\n    )+\n  \n  scale_x_continuous(\n    limits = c(0, 56),        \n    breaks = seq(0, 56, by = 28),        \n    minor_breaks = seq(0, 56, by = 14)\n  ) +\n  \n  theme_minimal(12)+\n  theme(\n    legend.position = \"none\",\n        \n    title=element_markdown(face=\"bold\"),\n    plot.subtitle=element_markdown(face=\"plain\"),\n        \n    axis.title=element_text(face=\"plain\"),\n        \n    strip.background = element_blank(),\n    strip.text = element_blank()\n    )\n\np_growth\n```\n\n::: {.cell-output-display}\n![Growth of simulated individuals](C_Model_def_sim_data_files/figure-html/fig-growthdatasim-1.png){#fig-growthdatasim width=576}\n:::\n:::\n\n\n\n\n### Model definition with `brms`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n# Model definition\nbf.mod <- \n  \n  bf(\n    L  ~ L0+a*t,                            # <1> \n    L0 ~ 1 + (1||ID),                       # <2>\n    a  ~ 0 + exposition+(0+exposition||ID), # <3>\n    \n    center=F,                               # <4>\n    nl=T                                    # <5>\n  )                              \n```\n:::\n\n\n\n\n1.  Equation of L depending on t\n2.  Each individual can have its own L0 value but L0 does not depend on the exposition\n3.  Each individual can have its own a value and a depend on the exposition\n4.  Data are centered in the calculation process\n5.  Our parameters have non-linear definitions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nList_parameters <- \n  \n  c(\n    \"b_L0_Intercept\",       # L0_mu\n    \"sd_ID__L0_Intercept\",  # L0_sd\n    \"b_a_exposition0\",      # a_ctrl_mu\n    \"b_a_exposition1\",      # a_trt_mu\n    \"sd_ID__a_exposition0\", # a_ctrl_sd\n    \"sd_ID__a_exposition1\", # a_trt_sd\n    \"sigma\"                 # Residuals variance\n  )\n```\n:::\n\n\n\n\nThe model parameters are named as follows by `brms` :\n\n-   $L0_{\\mu}$ : `b_L0_Intercept`\n-   $L0_{\\sigma}$ : `sd_ID__L0_Intercept`\n-   $a_{\\text{ctrl},\\mu}$ : `b_a_exposition0`\n-   $a_{\\text{trt},\\mu}$ : `b_a_exposition1`\n-   $a_{\\text{ctrl},\\sigma}$ : `sd_ID__a_exposition0`\n-   $a_{\\text{trt},\\sigma}$ : `sd_ID__a_exposition1`\n\n### Priors definitions {#sec-Cpriorsdef}\n\nThe priors cannot be defined according to the results of @bart_2020a. Therefore we base the prior to our general knowledge about *A. caliginosa* :\n\n-   Weight at birth is often around 10 to 15 mg and might range from 8 to 20. The prior on $L0_{\\mu}$ can be a normal distribution with a mean of 12.5$^{1/3}$ = 2.32 mg$^{1/3}$ and coefficient of variation of 20%. The prior on $L0_{\\sigma}$ can be a normal distribution with a mean of 2.32 $\\times$ 0.2 and a coefficient of variation of 100%. We also know that $L0_{\\mu}$ cannot\n-   An individual typically takes 4 months to be an adult weighting around 600 mg. It gives us a growth rate of 600$^{1/3}$/(30 $\\times$ 4) = 0.070 mg$^{1/3}$/d. The prior on $a_{ctrl,\\mu}$ can be a normal distribution with a mean of 0.070 and a coefficient of variation of 20% so our prior is less restrictive.\n-   We have no real *a priori* knowledge about the inter-individual variation of growth. We therefore want a large prior such as a normal distribution with a mean of 15% of the mean growth rate and a coefficient of variation of 100%.\n\nThe same priors are given to the two cohorts. A growth rate individual variation of 20% was given as a prior for the two cohort.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n# Priors definition\npriors <-\n  prior(normal(2.32, 2.32*0.2), class = b, nlpar = L0, lb = 0) +                       # <1>\n  prior(normal(2.32*0.2, 2.32*0.2), class = sd, nlpar = L0)+                           # <2>\n\n  prior(normal(0.070, 0.070*0.2), class=b, coef=exposition0, nlpar = a) +              # <3>\n  prior(normal(0.070,  0.070*0.2), class=b, coef=exposition1, nlpar = a) +             # <4>\n\n  prior(normal(0.070*0.2,  0.070), class=sd,                                           # <5>\n        coef=exposition0, group=ID, nlpar = a)+                                        # <5>\n  prior(normal(0.070*0.2,  0.070), class=sd,                                           # <6>\n        coef=exposition1, group=ID, nlpar = a)+                                        # <6>\n\n  prior(exponential(1), sigma, nlpar=\"\")                                                         # <7>\n```\n:::\n\n\n\n\n1.  Prior on $L0_{\\mu}$\n2.  Prior on $L0_{\\sigma}$\n3.  Prior on $a_{\\text{ctrl},\\mu}$\n4.  Prior on $a_{\\text{trt},\\mu}$\n5.  Prior on $a_{\\text{ctrl},\\sigma}$\n6.  Prior on $a_{\\text{trt},\\sigma}$\n7.  Prior on residuals\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_dens <- Nord_polar[1]\nalpha_dens <- 0.5\nsizetitle <- 18\n\npriors$nlpar <- factor(priors$nlpar, levels = c(\"L0\", \"a\")) \n\np1 <- priors %>% \n  parse_dist() %>% \n  filter(class == \"b\") %>% \n  ggplot(\n    aes(\n      xdist = .dist_obj, \n      y = format(.dist_obj),\n      color = coef,\n      fill = coef\n      )\n    ) +\n  stat_dist_halfeye(\n    alpha = alpha_dens\n  ) +\n  facet_wrap(\n    ~nlpar+coef, \n    scales = \"free\"\n    ) +\n  scale_color_manual(values = c(Nord_polar[4], Nord_frost[4], col_red))+\n  scale_fill_manual(values = c(Nord_polar[4], Nord_frost[4], col_red))+\n  ggtitle(\"Intercepts\") +\n  labs(\n    x = \"Value\",\n    y = \"Density\"\n    )+\n  theme_minimal()+\n  theme(\n    axis.text.y = element_text(angle = 90),\n    plot.title = element_text(face=\"bold\", size = sizetitle),\n    strip.text = element_text(face=\"plain\", size = sizetitle-2),\n        )\n\np2 <- priors %>% \n  parse_dist() %>% \n  filter(class == \"sd\") %>% \n  ggplot(\n    aes(\n      xdist = .dist_obj, \n      y = format(.dist_obj),\n      color = coef,\n      fill = coef\n      )\n    ) +\n  stat_dist_halfeye(\n    alpha = alpha_dens\n  ) +\n  facet_wrap(\n    ~nlpar+coef, \n    scales = \"free\"\n    ) +\n  scale_color_manual(values = c(Nord_polar[4], Nord_frost[4], col_red))+\n  scale_fill_manual(values = c(Nord_polar[4], Nord_frost[4], col_red))+\n  ggtitle(\"Inter-individual variances\") +\n  labs(\n    x = \"Value\",\n    y = \"Density\"\n    )+\n  theme_minimal()+\n  theme(\n    axis.text.y = element_text(angle = 90),\n    plot.title = element_text(face=\"bold\", size = sizetitle),\n    strip.text = element_text(face=\"plain\", size = sizetitle-2),\n    )\n\np3 <- priors %>% \n  parse_dist() %>% \n  filter(class == \"sigma\") %>% \n  ggplot(\n    aes(\n      xdist = .dist_obj, \n      y = format(.dist_obj),\n      color = coef,\n      fill = coef\n      )\n    ) +\n  stat_dist_halfeye(\n    # fill = col_dens,\n    # color = col_dens,\n    alpha = alpha_dens\n  ) +\n  facet_wrap(\n    ~nlpar, \n    scales = \"free\"\n    ) +\n  scale_color_manual(values = c(Nord_polar[4], Nord_frost[4], col_red))+\n  scale_fill_manual(values = c(Nord_polar[4], Nord_frost[4], col_red))+\n  ggtitle(\"Residual variance\") +\n  labs(\n    x = \"Value\",\n    y = \"Density\"\n    )+\n  theme_minimal()+\n  theme(\n    axis.text.y = element_text(angle = 90),\n    plot.title = element_text(face=\"bold\", size = sizetitle),\n    strip.text = element_text(face=\"plain\", size = sizetitle-2),\n    )\n\n\n\np <- plot_grid(\n  p1, p2, p3, \n  ncol = 1, align = \"v\", axis = \"l\"\n)\np\n```\n\n::: {.cell-output-display}\n![Priors of our model.](C_Model_def_sim_data_files/figure-html/fig-priorplot-1.png){#fig-priorplot width=1152}\n:::\n:::\n\n\n\n\n\n\n### Prior predictive check\n\nIn bayesian modeling, we first perform a prior predictive check before fitting the model to our data. This allows us to check on the rationnality of the chosen priors.\n\nResults of the model with the sampling of priors :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nm.sim.prior <- \n  \n  brm(\n    data = df_sim,                               # <1>\n    bf.mod,                                   # <2>\n    backend = \"cmdstanr\",                        # <3>\n    prior = priors,                              # <4>\n    sample_prior = \"only\",                       # <5>\n    cores = 4,                                   # <6>\n    seed = 1212,                                 # <7>\n    iter = 1000, warmup = 500,                   # <8>\n    control = list(\n      adapt_delta = .95,                         # <9>\n      max_treedepth = 12                         # <9>\n      ), \n    file=here::here(\"mod/m_brms_prior_sim\")   # <10>\n  )\n\nprint(m.sim.prior)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: L ~ L0 + a * t \n         L0 ~ 1 + (1 || ID)\n         a ~ 0 + exposition + (0 + exposition || ID)\n   Data: df_sim (Number of observations: 300) \n  Draws: 4 chains, each with iter = 1000; warmup = 500; thin = 1;\n         total post-warmup draws = 2000\n\nMultilevel Hyperparameters:\n~ID (Number of levels: 60) \n                  Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsd(L0_Intercept)      0.61      0.35     0.05     1.35 1.00     1206      916\nsd(a_exposition0)     0.06      0.04     0.00     0.16 1.00     1337      934\nsd(a_exposition1)     0.06      0.04     0.00     0.17 1.00     1361      794\n\nRegression Coefficients:\n              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nL0_Intercept      2.32      0.46     1.41     3.19 1.00     2449      980\na_exposition0     0.07      0.01     0.04     0.10 1.00     2637     1272\na_exposition1     0.07      0.01     0.04     0.10 1.00     3378     1323\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     0.99      1.01     0.03     3.89 1.00     1644      818\n\nDraws were sampled using sample(hmc). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n:::\n\n\n\n\n1.  Data used\n2.  Model to be used\n3.  Type of backend for calculations\n4.  Priors to be used\n5.  Work only done with priors and not the data\n6.  Cores for calculations\n7.  Seed for reproducibility\n8.  A total of 1000 interations are done with 500 that are part of the warmup phase\n9.  Control parameters on the iterations\n10. Path where the model results are saved\n\nWe can then plot the predictions of this model and see if they represent at least the full range of our experimental data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred <- predicted_draws(m.sim.prior, newdata=df_sim) # <1> \n\ny_max <- 500\n\np_ctrl <- ggplot()+\n  \n  stat_lineribbon(\n    data = subset(pred, exposition == 0), \n    aes(x = t, y = .prediction^3, group = exposition),\n    .width=c(.99,.95,.8,.5),\n    color=\"black\"\n    )+\n  geom_line(\n    data = subset(df_sim, exposition == 0),\n    aes(x = t, y = w, group=ID),\n    color = \"black\",\n    alpha = 0.4\n    )+\n  geom_point(\n    data = subset(df_sim, exposition == 0),\n    aes(x = t, y = w, group = ID),\n    color = \"black\",\n    alpha = 0.4\n    )+\n  \n  scale_fill_manual(values = rev(pal_blue))+\n  \n  labs(y=\"Weight (mg)\", x=\"Time (days)\")+\n  \n  ylim(0, y_max)+\n  \n  scale_x_continuous(\n    limits = c(0, 56),        \n    breaks = seq(0, 56, by = 28),        \n    minor_breaks = seq(0, 56, by = 14)\n  ) +\n  \n  theme_minimal(14)+\n  theme(legend.position = \"none\")\n\n\np_trt <- ggplot()+\n  \n  stat_lineribbon(\n    data = subset(pred, exposition == 1),\n    aes(x = t, y=.prediction^3, group=exposition),\n    .width=c(.99,.95,.8,.5),\n    color=\"black\"\n    )+\n  geom_point(\n    data = subset(df_sim, exposition == 1),\n    aes(x = t, y = w, group = ID),\n    color = \"black\",\n    alpha = 0.4\n    )+\n  geom_line(\n    data = subset(df_sim, exposition == 1),\n    aes(x = t, y = w, group = ID),\n    color = \"black\",\n    alpha = 0.4\n    )+\n  \n  scale_fill_manual(values = rev(pal_red))+\n  \n  labs(y=\"Weight (mg)\", x=\"Time (days)\")+\n  \n  ylim(0, y_max)+\n  scale_x_continuous(\n    limits = c(0, 56),        \n    breaks = seq(0, 56, by = 28),        \n    minor_breaks = seq(0, 56, by = 14)\n  ) +\n  \n  theme_minimal(14)+\n  theme(legend.position = \"none\")\n\nplot.prior_pred <- p_ctrl + p_trt + \n  plot_layout(ncol = 2, guides = \"collect\") & \n  theme(\n    legend.position = \"right\", \n    title=element_text(face=\"bold\"), \n    axis.title.x = element_text(face=\"plain\"),\n    axis.title.y = element_text(face=\"plain\")\n    )\n\nplot.prior_pred\n```\n\n::: {.cell-output-display}\n![Prior predictive check.Fresh body weight of simulated non-exposed earthworms (blue points and thin lines, each line corresponding to one individual) and earthworms exposed to the equivalent of 3 RD of Swing® Gold renewed every 28 days (red points and thin lines, each line corresponding to one individual). Colored ribbons correspond to the different credibility intervals for the mean growth for each cohort under the prior distribution. The thicker black lines represent the predicted mean body weight based solely on prior assumptions.](C_Model_def_sim_data_files/figure-html/fig-priorpredVIsim-1.png){#fig-priorpredVIsim width=768}\n:::\n:::\n\n\n\n\n1.  Predictions from the model\n\nThe @fig-priorpredVIsim shows the chosen priors are realistic.\n\nThe prior sensitivity of our model is explored @sec-Fpriorsens.\n\n### Posterior predictive check\n\n#### Model fit\n\nWe can now fit the model to our simulated data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nm.sim.post <-\n\n  brm(\n    data = df_sim,                                 # <1>\n    bf.mod,                                        # <2>\n    backend = \"cmdstanr\",                          # <3>\n    prior = priors,                                # <4>\n    save_pars = save_pars(all = TRUE),             # <5>\n    sample_prior = \"yes\",                          # <6>\n    seed = 12121212,                               # <7>\n    chains = 4, cores = 4,                         # <8>\n    iter = 6000, warmup = 1000,                    # <9>\n    control = list(adapt_delta = .95,              # <10>\n    max_treedepth = 12),                           # <10>\n    file=here::here(\"mod/m_brms_post_sim\")      # <11>\n  )\n\nprint(m.sim.post)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: L ~ L0 + a * t \n         L0 ~ 1 + (1 || ID)\n         a ~ 0 + exposition + (0 + exposition || ID)\n   Data: df_sim (Number of observations: 300) \n  Draws: 4 chains, each with iter = 6000; warmup = 1000; thin = 1;\n         total post-warmup draws = 20000\n\nMultilevel Hyperparameters:\n~ID (Number of levels: 60) \n                  Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsd(L0_Intercept)      0.41      0.04     0.34     0.49 1.00     4727     8913\nsd(a_exposition0)     0.01      0.00     0.01     0.01 1.00     8096    12231\nsd(a_exposition1)     0.01      0.00     0.01     0.01 1.00     6808    11548\n\nRegression Coefficients:\n              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nL0_Intercept      2.28      0.05     2.18     2.39 1.00     2420     5015\na_exposition0     0.07      0.00     0.07     0.08 1.00     5502     9989\na_exposition1     0.07      0.00     0.06     0.07 1.00     3997     8397\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     0.10      0.01     0.09     0.11 1.00    13705    15182\n\nDraws were sampled using sample(hmc). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n:::\n\n\n\n\n1.  Data used\n2.  Model to be used\n3.  Type of backend for calculations\n4.  Priors to be used\n5.  We want all parameters to be saved\n6.  Work done with priors and the data\n7.  Number of chains and cores for calculations\n8.  Seed for reproducibility\n9.  A total of 6000 interations are done with 1000 that are part of the warmup phase\n10. Control parameters on the iterations\n11. Path where the model results are saved\n\n#### Parameter estimation results\n\nChains recuperation and calculation of additional parameters :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_chains <- ggs(m.sim.post, burnin = T) |>                     # <1>\n  filter(Parameter %in% List_parameters) |>                     # <1>\n  mutate(                                                       # <1>\n    Chain=as.factor(Chain),                                     # <1>\n    value=value                                                 # <1>\n    )                                                           # <1>\n\ndf_chains_post <- df_chains |>                                  # <2>\n filter(Iteration>1000)                                         # <2>\n\ndf_chains_median <- df_chains_post |>                           # <3>\n  aggregate(value ~ Parameter, median) |>                       # <3>\n  rename(median = value)                                        # <3>\n\ndf_chains_post_large <-                                         # <4>\n  dcast(                                                        # <4>\n    data = df_chains_post,                                      # <4>\n    formula = Iteration + Chain ~ Parameter,                    # <4>\n    value.var = 'value'                                         # <4>\n  )                                                             # <4>\n\ndf_chains_post_large <- df_chains_post_large |>                 # <4>\n  mutate(                                                       # <4>\n    Delta_a_mu = b_a_exposition1-b_a_exposition0,               # <4>\n    Ratio_a_mu = b_a_exposition1/b_a_exposition0,               # <4>\n    Delta_a_sd = sd_ID__a_exposition1-sd_ID__a_exposition0,     # <4>\n    Ratio_a_sd = sd_ID__a_exposition1/sd_ID__a_exposition0,     # <4>\n    LnRR = log(b_a_exposition1/b_a_exposition0),                # <4>\n    LnCVi = log((sd_ID__a_exposition1/b_a_exposition1)/(sd_ID__a_exposition0/b_a_exposition0)) # <4>\n  )\n\ndf_chains_post_long <- df_chains_post_large |>                  # <4>\n  melt(                                                         # <4>\n    id.vars=c(\"Iteration\", \"Chain\"),                            # <4>\n    measure.vars=colnames(df_chains_post_large)[-c(1,2)],       # <4>\n    variable.name=\"Parameter\",                                  # <4>\n    value.name=\"value\"                                          # <4>\n  )                                                             # <4>\n\nParam_a_mu <- c(\n  \"b_a_exposition0\",\n  \"b_a_exposition1\"\n  )\nParam_a_sd <- c(\n  \"sd_ID__a_exposition0\",\n  \"sd_ID__a_exposition1\"\n  )\nParam_ctrl <- c(\n  \"b_a_exposition0\",\n  \"sd_ID__a_exposition0\"\n  )\nParam_trt <- c(\n  \"b_a_exposition1\",\n  \"sd_ID__a_exposition1\"\n  )\nParam_t0 <- c(\n  \"b_L0_Intercept\",\n  \"sd_ID__L0_Intercept\",\n  \"Delta_a_mu\",\n  \"Delta_a_sd\"\n  )\n\ndf_chains_post_long <- df_chains_post_long |>\n  mutate(\n    exposition = case_when(\n      Parameter %in% Param_ctrl ~ \"Non exposed\",\n      Parameter %in% Param_trt ~ \"Exposed\",\n      Parameter %in% Param_t0 ~ \"General\")\n    )\n```\n:::\n\n\n\n\n1.  Extraction of each chain iterations values for each parameters\n2.  Only iterations after the warmup phase\n3.  Adding medians from each distribution\n4.  Calculation delta and ratios between non-exposed and exposed individuals\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalpha_dens <- 0.5\nalpha_dens_prior <- 0.2\nfont_size <- 12\ncol_dens <- Nord_polar[1]\ncol_dens_ctrl <- Nord_frost[4]\ncol_dens_trt <- col_red\nsize_norm <- 0.7\n\nprior_L0_mu <- priors %>% \n  parse_dist() %>% \n  filter(class == \"b\" & nlpar == \"L0\")\nprior_L0_sd <- priors %>% \n  parse_dist() %>% \n  filter(class == \"sd\" & nlpar == \"L0\")\n\nprior_a_ctrl_mu <- priors %>% \n  parse_dist() %>% \n  filter(class == \"b\" & nlpar == \"a\" & coef == \"exposition0\")\nprior_a_ctrl_sd <- priors %>% \n  parse_dist() %>% \n  filter(class == \"sd\" & nlpar == \"a\" & coef == \"exposition0\")\n\nprior_a_trt_mu <- priors %>% \n  parse_dist() %>% \n  filter(class == \"b\" & nlpar == \"a\" & coef == \"exposition1\")\nprior_a_trt_sd <- priors %>% \n  parse_dist() %>% \n  filter(class == \"sd\" & nlpar == \"a\" & coef == \"exposition1\")\n\nprior_sigma <- priors %>% \n  parse_dist() %>% \n  filter(class == \"sigma\")\n\nplot_L0_mu <-\n  ggplot() +\n  stat_dist_halfeye(\n    data = prior_L0_mu,\n    aes(\n      xdist = .dist_obj\n      ),\n    fill = col_dens,\n    color = col_dens,\n    alpha = alpha_dens_prior\n  ) +\n  stat_halfeye(\n    data = subset(df_chains_post_long,Parameter == \"b_L0_Intercept\"),\n    mapping = aes(\n      x=value,\n    ),\n    fill = col_dens,\n    color = col_dens,\n    alpha = alpha_dens\n  ) +\n  labs(\n    x = \"Value\",\n    y = \"Density\",\n    title = bquote(bold(\"Mean initial structural length \" (mg^{1/3})))\n    )+\n  theme_minimal()+\n  theme(\n    axis.text.y = element_text(angle = 90),\n    plot.title = element_text(face = \"bold\")\n        )\n\nplot_L0_sd <-\n  ggplot() +\n  stat_dist_halfeye(\n    data = prior_L0_sd,\n    aes(\n      xdist = .dist_obj\n      ),\n    fill = col_dens,\n    color = col_dens,\n    alpha = alpha_dens_prior\n  ) +\n  stat_halfeye(\n    data = subset(df_chains_post_long,Parameter == \"sd_ID__L0_Intercept\"),\n    mapping = aes(\n      x=value,\n    ),\n    fill = col_dens,\n    color = col_dens,\n    alpha = alpha_dens\n  ) +\n  labs(\n    x = \"Value\",\n    y = \"Density\",\n    title = bquote(bold(\"Individual variation of\\ninitial structural length \" (mg^{1/3})))\n    )+\n  theme_minimal()+\n  theme(\n    axis.text.y = element_text(angle = 90),\n    plot.title = element_text(face = \"bold\")\n        )\n\nplot_a_ctrl_mu <-\n  ggplot() +\n  stat_dist_halfeye(\n    data = prior_a_ctrl_mu,\n    aes(\n      xdist = .dist_obj\n      ),\n    fill = col_dens,\n    color = col_dens,\n    alpha = alpha_dens_prior\n  ) +\n  stat_halfeye(\n    data = subset(df_chains_post_long,Parameter == \"b_a_exposition0\"),\n    mapping = aes(\n      x=value,\n    ),\n    fill = col_dens_ctrl,\n    color = col_dens_ctrl,\n    alpha = alpha_dens\n  ) +\n  labs(\n    x = \"Value\",\n    y = \"Density\",\n    title = bquote(bold(\"Mean growth rate \" (mg^{1/3}/d))),\n    subtitle = \"Non-exposed\"\n    )+\n  theme_minimal()+\n  theme(\n    axis.text.y = element_text(angle = 90),\n    plot.title = element_text(face = \"bold\")\n        )\n\nplot_a_trt_mu <-\n  ggplot() +\n  stat_dist_halfeye(\n    data = prior_a_trt_mu,\n    aes(\n      xdist = .dist_obj\n      ),\n    fill = col_dens,\n    color = col_dens,\n    alpha = alpha_dens_prior\n  ) +\n  stat_halfeye(\n    data = subset(df_chains_post_long,Parameter == \"b_a_exposition1\"),\n    mapping = aes(\n      x=value,\n    ),\n    fill = col_dens_trt,\n    color = col_dens_trt,\n    alpha = alpha_dens\n  ) +\n  labs(\n    x = \"Value\",\n    y = \"Density\",\n    title = bquote(bold(\"Mean growth rate \" (mg^{1/3}/d))),\n    subtitle = \"Exposed\"\n    )+\n  theme_minimal()+\n  theme(\n    axis.text.y = element_text(angle = 90),\n    plot.title = element_text(face = \"bold\")\n        )\n\nplot_a_ctrl_sd <-\n  ggplot() +\n  stat_dist_halfeye(\n    data = prior_a_ctrl_sd,\n    aes(\n      xdist = .dist_obj\n      ),\n    fill = col_dens,\n    color = col_dens,\n    alpha = alpha_dens_prior\n  ) +\n  stat_halfeye(\n    data = subset(df_chains_post_long,Parameter == \"sd_ID__a_exposition0\"),\n    mapping = aes(\n      x=value,\n    ),\n    fill = col_dens_ctrl,\n    color = col_dens_ctrl,\n    alpha = alpha_dens\n  ) +\n  labs(\n    x = \"Value\",\n    y = \"Density\",\n    title = bquote(bold(\"Inter-individual variation\\nof growth rate \" (mg^{1/3}/d))),\n    subtitle = \"Non-exposed\"\n    )+\n  theme_minimal()+\n  theme(\n    axis.text.y = element_text(angle = 90),\n    plot.title = element_text(face = \"bold\")\n        )\n\nplot_a_trt_sd <-\n  ggplot() +\n  stat_dist_halfeye(\n    data = prior_a_trt_sd,\n    aes(\n      xdist = .dist_obj\n      ),\n    fill = col_dens,\n    color = col_dens,\n    alpha = alpha_dens_prior\n  ) +\n  stat_halfeye(\n    data = subset(df_chains_post_long,Parameter == \"sd_ID__a_exposition1\"),\n    mapping = aes(\n      x=value,\n    ),\n    fill = col_dens_trt,\n    color = col_dens_trt,\n    alpha = alpha_dens\n  ) +\n  labs(\n    x = \"Value\",\n    y = \"Density\",\n    title = bquote(bold(\"Inter-individual variation\\nof growth rate \" (mg^{1/3}/d))),\n    subtitle = \"Exposed\"\n    )+\n  theme_minimal()+\n  theme(\n    axis.text.y = element_text(angle = 90),\n    plot.title = element_text(face = \"bold\")\n        )\n\nplot_sigma <-\n  ggplot() +\n  stat_dist_halfeye(\n    data = prior_sigma,\n    aes(\n      xdist = .dist_obj\n      ),\n    fill = col_dens,\n    color = col_dens,\n    alpha = alpha_dens_prior\n  ) +\n  stat_halfeye(\n    data = subset(df_chains_post_long,Parameter == \"sigma\"),\n    mapping = aes(\n      x=value,\n    ),\n    fill = col_dens,\n    color = col_dens,\n    alpha = alpha_dens\n  ) +\n  labs(\n    x = \"Value\",\n    y = \"Density\",\n    title = bquote(bold(\"Residual variance\" (mg^{1/3})))\n    )+\n  theme_minimal()+\n  theme(\n    axis.text.y = element_text(angle = 90),\n    plot.title = element_text(face = \"bold\")\n        )\n\n\np <- (plot_L0_mu+ plot_a_ctrl_mu + plot_a_trt_mu)/(plot_L0_sd + plot_a_ctrl_sd   + plot_a_trt_sd) / plot_sigma \np\n```\n\n::: {.cell-output-display}\n![Prior (light grey) and posterior distributions for each parameter.](C_Model_def_sim_data_files/figure-html/fig-priorpost-1.png){#fig-priorpost width=1152}\n:::\n:::\n\n\n\n\nParameters estimation results :\n\n\n\n\n::: {#tbl-compvalposttheoVI .cell tbl-cap='Different statistical values of the posterior distributions'}\n\n```{.r .cell-code}\ndf_res_VI <- summarise_draws(tidy_draws(m.sim.post))\ndf_res_VI_show <- df_res_VI[1:7,]\n\ndf_res_VI_show |> datatable(\n  options = list(\n    dom = 't',\n    columnDefs = list(\n      list(className = 'dt-left', targets = \"_all\")\n      )\n    ),\n  class=\"hover\"\n  ) |>\n  formatRound(columns = 2:length(df_res_VI_show), digits = 2)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-9c8383572df8abc40ecb\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-9c8383572df8abc40ecb\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"],[\"b_L0_Intercept\",\"b_a_exposition0\",\"b_a_exposition1\",\"sd_ID__L0_Intercept\",\"sd_ID__a_exposition0\",\"sd_ID__a_exposition1\",\"sigma\"],[2.2840637695,0.074111805155,0.066567989245,0.40788810815,0.0078017668675,0.009824141066,0.101592260835],[2.28364,0.07411295,0.06655045,0.4049355,0.007683189999999999,0.009675359999999999,0.1013405],[0.05342610403300514,0.001490568346392975,0.001817289740963439,0.03970896018796034,0.001186966899870926,0.001443021530353666,0.00532213978123564],[0.05372942399999974,0.001443978270000002,0.001776896100000007,0.03871884030000002,0.001130415783000001,0.001384036751999998,0.00528628443],[2.196818,0.071676895,0.06361152,0.348307,0.006071366000000001,0.0077610985,0.09319029999999999],[2.3715015,0.07655784,0.06956783999999999,0.4788662499999999,0.0099378325,0.012411035,0.1107922],[1.00115687070321,1.000581078915969,1.001058652757698,1.000742546200306,0.9999686677188684,1.000619072589337,0.999989925088307],[2419.978571129914,5502.490078825916,3997.412082753256,4726.732380457339,8096.473721849127,6808.436104703797,13704.88191997441],[5015.486898311762,9988.602818481137,8396.665697002139,8913.452358623461,12231.14072588999,11548.10795671979,15181.50100245386]],\"container\":\"<table class=\\\"hover\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>variable<\\/th>\\n      <th>mean<\\/th>\\n      <th>median<\\/th>\\n      <th>sd<\\/th>\\n      <th>mad<\\/th>\\n      <th>q5<\\/th>\\n      <th>q95<\\/th>\\n      <th>rhat<\\/th>\\n      <th>ess_bulk<\\/th>\\n      <th>ess_tail<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"t\",\"columnDefs\":[{\"targets\":2,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":3,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":4,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":5,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":6,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":7,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":8,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":9,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":10,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"className\":\"dt-left\",\"targets\":\"_all\"},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"variable\",\"targets\":1},{\"name\":\"mean\",\"targets\":2},{\"name\":\"median\",\"targets\":3},{\"name\":\"sd\",\"targets\":4},{\"name\":\"mad\",\"targets\":5},{\"name\":\"q5\",\"targets\":6},{\"name\":\"q95\",\"targets\":7},{\"name\":\"rhat\",\"targets\":8},{\"name\":\"ess_bulk\",\"targets\":9},{\"name\":\"ess_tail\",\"targets\":10}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[\"options.columnDefs.0.render\",\"options.columnDefs.1.render\",\"options.columnDefs.2.render\",\"options.columnDefs.3.render\",\"options.columnDefs.4.render\",\"options.columnDefs.5.render\",\"options.columnDefs.6.render\",\"options.columnDefs.7.render\",\"options.columnDefs.8.render\"],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n::: {#tbl-lnRRCVI .cell tbl-cap='Effect size results'}\n\n```{.r .cell-code}\n# Calculation of the results for Ln(RR) and Ln(CVi)\n\nMedian_LnRR <- median(subset(df_chains_post_long, Parameter==\"LnRR\")$value)\nMedian_LnCVi <- median(subset(df_chains_post_long, Parameter==\"LnCVi\")$value)\nMedian_LnRR_print <- round(Median_LnRR, 2)\nMedian_LnCVi_print <- round(Median_LnCVi, 2)\n\nMedian_Ratio_a_mu <- median(subset(df_chains_post_long, Parameter==\"Ratio_a_mu\")$value)\nMedian_Ratio_a_sd <- median(subset(df_chains_post_long, Parameter==\"Ratio_a_sd\")$value)\n\nCI_Ratio_a_mu <- bayestestR::ci(subset(df_chains_post_long, Parameter==\"Ratio_a_mu\")$value, method = \"ETI\", ci = 0.90)\nCI_Ratio_a_mu_p <- paste(\"[\", round(CI_Ratio_a_mu$CI_low,2), \" ; \", round(CI_Ratio_a_mu$CI_high,2), \"]\", sep=\"\")\nCI_Ratio_a_sd <- bayestestR::ci(subset(df_chains_post_long, Parameter==\"Ratio_a_sd\")$value, method = \"ETI\", ci = 0.90)\nCI_Ratio_a_sd_p <- paste(\"[\", round(CI_Ratio_a_sd$CI_low,2), \" ; \", round(CI_Ratio_a_sd$CI_high,2), \"]\", sep=\"\")\n\nCI_LnRR <- bayestestR::ci(subset(df_chains_post_long, Parameter==\"LnRR\")$value, method = \"ETI\", ci = 0.90)\nCI_LnRR_p <- paste(\"[\", round(CI_LnRR$CI_low,2), \" ; \", round(CI_LnRR$CI_high,2), \"]\", sep=\"\")\n\nCI_LnCVi <- bayestestR::ci(subset(df_chains_post_long, Parameter==\"LnCVi\")$value, ci = 0.90)\nCI_LnCVi_p <- paste(\"[\", round(CI_LnCVi$CI_low,2), \" ; \", round(CI_LnCVi$CI_high,2), \"]\", sep=\"\")\n\npd_LnRR <- p_direction(subset(df_chains_post_long, Parameter==\"LnRR\")$value)\npd_LnCVi <- p_direction(subset(df_chains_post_long, Parameter==\"LnCVi\")$value)\n\npd_Ratio_a_mu <- p_direction(subset(df_chains_post_long, Parameter==\"Ratio_a_mu\")$value)\npd_Ratio_a_sd <- p_direction(subset(df_chains_post_long, Parameter==\"Ratio_a_sd\")$value)\n\ndf_res_Ln <- data.frame(\n  Variable = c(\"LnRR\", \"LnCVi\", \"Ratio a_mu\", \"Ratio a_sd\"),\n  Median = c(Median_LnRR, Median_LnCVi, Median_Ratio_a_mu, Median_Ratio_a_sd),\n  CI = c(CI_LnRR_p, CI_LnCVi_p, CI_Ratio_a_mu_p, CI_Ratio_a_sd_p),\n  pd = c(pd_LnRR$pd, pd_LnCVi$pd, pd_Ratio_a_mu$pd, pd_Ratio_a_sd$pd)\n) |> \n  mutate(\n    Median = round(Median, 3)\n  )\n\n# Results expressed as LnRR and LnCVi\ndf_res_Ln |> datatable(\n  options = list(\n    dom = 't',\n    autoWidth = TRUE,\n    columnDefs = list(\n      list(className = 'dt-left', targets = \"_all\")\n      )\n    ), \n  class=\"hover\"\n  ) |>\n  formatRound(columns = c(2,4), digits = 2)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-f40baa128f49de41b012\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f40baa128f49de41b012\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\"],[\"LnRR\",\"LnCVi\",\"Ratio a_mu\",\"Ratio a_sd\"],[-0.107,0.341,0.898,1.264],[\"[-0.16 ; -0.05]\",\"[0 ; 0.69]\",\"[0.85 ; 0.95]\",\"[0.9 ; 1.78]\"],[0.9988125,0.9499375,1,1]],\"container\":\"<table class=\\\"hover\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Variable<\\/th>\\n      <th>Median<\\/th>\\n      <th>CI<\\/th>\\n      <th>pd<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"t\",\"autoWidth\":true,\"columnDefs\":[{\"targets\":2,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":4,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 2, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"className\":\"dt-left\",\"targets\":\"_all\"},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"Variable\",\"targets\":1},{\"name\":\"Median\",\"targets\":2},{\"name\":\"CI\",\"targets\":3},{\"name\":\"pd\",\"targets\":4}],\"order\":[],\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[\"options.columnDefs.0.render\",\"options.columnDefs.1.render\"],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n#### Chains\n\nWe can check if the chains look good (@fig-chainsVI).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot <-\n  ggplot(\n    data = df_chains_post,\n    aes(x = Iteration, y = value, color = Chain, group = Chain)\n  )+\n  geom_line(alpha=0.7)+\n  facet_wrap(~Parameter, scales = \"free\", ncol = 3)+\n\n  scale_color_manual(values = nord(palette = \"frost\"))+\n\n  theme_bw()+\n  theme(\n    legend.position = \"right\",\n    title=element_text(size=12, face=\"plain\"),\n    axis.title.x = element_text(face=\"plain\"),\n    strip.background = element_rect(fill=\"white\")\n    )\n\nplot\n```\n\n::: {.cell-output-display}\n![Parameters chains (without the first 1000 iterations of warmup).](C_Model_def_sim_data_files/figure-html/fig-chainsVI-1.png){#fig-chainsVI width=768}\n:::\n:::\n\n\n\n\nWe can also check on the parameters correlations (@fig-pairsVIsim).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbayesplot::color_scheme_set(\"gray\")\np <- pairs(m.sim.post, regex=T)\np\n```\n\n::: {.cell-output-display}\n![Parameters correlations](C_Model_def_sim_data_files/figure-html/fig-pairsVIsim-1.png){#fig-pairsVIsim width=960}\n:::\n:::\n\n\n\n\n#### Model predictions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred <- predicted_draws(m.sim.post, newdata=df_sim)\npost_i <- as.data.frame(posterior_summary(m.sim.post))\n\nID <- subset(df_sim, t==0)$ID\nexpo <- subset(df_sim, t==0)$exposition\n\ndf_estimates <- \n  data.frame(\n    ID                = ID,\n    exposition        = expo,\n    r_L0_i            = post_i$Estimate[8:(8+length(ID)-1)],\n    r_a_i_expo_0      = post_i$Estimate[(8+length(ID)):(8+length(ID)*2-1)],\n    r_a_i_expo_1      = post_i$Estimate[(8+length(ID)*2):(8+length(ID)*3-1)],\n    r_a_i_2.5_expo_0  = post_i$Q2.5[(8+length(ID)):(8+length(ID)*2-1)],\n    r_a_i_2.5_expo_1  = post_i$Q2.5[(8+length(ID)*2):(8+length(ID)*3-1)],\n    r_a_i_97.5_expo_0 = post_i$Q97.5[(8+length(ID)):(8+length(ID)*2-1)],\n    r_a_i_97.5_expo_1 = post_i$Q97.5[(8+length(ID)*2):(8+length(ID)*3-1)]\n    ) |> \n  mutate(\n    L0_i = post_i$Estimate[1]+r_L0_i,\n    a_i = case_when(\n      exposition == 0 ~ post_i$Estimate[2]+r_a_i_expo_0,\n      exposition == 1 ~ post_i$Estimate[3]+r_a_i_expo_1\n      ),\n    a_i_2.5 = case_when(\n      exposition==0 ~ post_i$Q2.5[2]+r_a_i_expo_0,\n      exposition==1 ~ post_i$Q2.5[3]+r_a_i_expo_1\n      ),\n    a_i_97.5 = case_when(\n      exposition==0 ~ post_i$Q97.5[2]+r_a_i_expo_0,\n      exposition==1 ~ post_i$Q97.5[3]+r_a_i_expo_1\n      )\n    ) |> \n  select(ID, exposition, L0_i, a_i, a_i_2.5, a_i_97.5)\n\ndf_pred_mean <- pred |> \n  aggregate(\n    .prediction ~ t + ID + exposition, \n    FUN=mean\n    )\n\ndf_pred_Q <- pred |> \n  aggregate(\n    .prediction ~ t + ID + exposition, \n    FUN='quantile', \n    probs=c(2.5, 97.5)/100\n    )\n\n\ndf_pred <- df_pred_mean |> \n  cbind(df_pred_Q$.prediction[,1]) |> \n  cbind(df_pred_Q$.prediction[,2]) |>\n  mutate(Expo=case_when(exposition==0 ~ \"Non exposed\",\n                        exposition==1 ~ \"Exposed\"))\n\ncolnames(df_pred) <- c(\"t\", \"ID\", \"exposition\", \n                       \"pred_L_mean\", \"pred_L_Q2.5\", \"pred_L_Q97.5\", \"Expo\")\n```\n:::\n\n\n\n\nWe now check the predictions of the model at the population level (@fig-postpredVIsim) and the individual level (@fig-postpredVIindctrlsim & @fig-postpredVIindtrtsim) :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny_max <- 480\n\np_ctrl <- ggplot()+\n  \n  stat_lineribbon(\n    data = pred[pred$exposition == 0,],\n    aes(x=t, y=.prediction^3, group=exposition),\n    .width=c(.99,.95,.8,.5),\n    color=\"black\"\n    )+\n  geom_line(\n    data = df_sim[df_sim$exposition == 0,], \n    aes(x = t, y = L^3, group = ID), \n    color = \"#141c44\", \n    alpha = 0.4\n    )+\n  geom_point(\n    data = df_sim[df_sim$exposition == 0,], \n    aes(x = t, y = L^3, group = ID), color = \"#141c44\", alpha = 0.4\n    )+\n  \n  ylim(0, y_max)+\n  scale_x_continuous(\n    limits = c(0, 56),        \n    breaks = seq(0, 56, by = 28),        \n    minor_breaks = seq(0, 56, by = 14)\n  ) +\n  \n  scale_fill_manual(values = rev(pal_blue))+\n  \n  labs(y=\"Weight (mg)\", x=\"Time (days)\")+\n  \n  theme_minimal()+\n  theme(legend.position = \"none\")\n\np_trt <- ggplot()+\n  stat_lineribbon(\n    data = pred[pred$exposition == 1,], \n    aes(x=t, y = .prediction^3, group = exposition),\n    .width = c(.99,.95,.8,.5),\n    color = \"black\"\n    )+\n  geom_point(\n    data = df_sim[df_sim$exposition == 1,], \n    aes(x = t, y = L^3, group = ID), \n    color = \"#380000\", \n    alpha = 0.4\n    )+\n  geom_line(\n    data = df_sim[df_sim$exposition == 1,], \n    aes(x = t, y = L^3, group = ID), \n    color = \"#380000\", \n    alpha = 0.4\n    )+\n  \n  scale_x_continuous(\n    limits = c(0, 56),        \n    breaks = seq(0, 56, by = 28),        \n    minor_breaks = seq(0, 56, by = 14)\n  ) +\n  ylim(0, y_max)+\n  \n  \n  scale_fill_manual(values = rev(pal_red))+\n  \n  labs(y = \"Weight (mg)\", x = \"Time (days)\")+\n  \n  theme_minimal()+\n  theme(legend.position = \"none\")\n\nplot.estimates.grp <- p_ctrl + p_trt + \n  plot_layout(ncol=2, guides=\"collect\") & \n  theme(\n    legend.position = \"right\", \n    title=element_text(face=\"bold\"), \n    axis.title.x = element_text(face=\"plain\"),\n    axis.title.y = element_text(face=\"plain\")\n    )\n\nplot.estimates.grp\n```\n\n::: {.cell-output-display}\n![Posterior predictive check. Fresh body weight of simulated non-exposed earthworms (blue points and thin lines, each line corresponding to one individual) and earthworms exposed to the equivalent of 3 RD of Swing® Gold renewed each 28 days (red points and thin lines, each line corresponding to one individual). Colored ribbons correspond to the different credibility intervals for the mean growth for each cohort. The thicker black lines represent the predicted mean body weight.](C_Model_def_sim_data_files/figure-html/fig-postpredVIsim-1.png){#fig-postpredVIsim width=768}\n:::\n:::\n\n\n\n\n\n\n::: panel-tabset\n## Non-exposed\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_ctrl <- ggplot()+\n  stat_lineribbon(\n    data = pred[pred$exposition==0,], \n    aes(x = t, y=.prediction^3, color=exposition, group=ID),\n    .width=c(.99,.95,.8,.5),\n    color=\"black\"\n    )+\n  geom_line(\n    data=df_sim[df_sim$exposition==0,], \n    aes(x=t, y=L^3, group=ID), \n    color=\"#141c44\", \n    alpha=0.25\n    )+\n  geom_point(\n    data=df_sim[df_sim$exposition==0,],\n    aes(x=t, y=L^3, group=ID), \n    color=\"#141c44\", \n    alpha=0.3, \n    size=2.5\n    )+\n  facet_wrap(~ID, ncol=5)+\n  \n  scale_fill_manual(values = rev(pal_blue))+\n  \n  labs(y=\"Weight (mg)\", x=\"Time (days)\")+\n  ylim(0, y_max)+\n  scale_x_continuous(\n    limits = c(0, 56),        \n    breaks = seq(0, 56, by = 28),        \n    minor_breaks = seq(0, 56, by = 14)\n  ) +\n  \n  theme_bw()+\n  theme(\n    legend.position = \"right\", \n    title=element_text(size=12, face=\"plain\"), \n    axis.title.x = element_text(face=\"plain\"),\n    strip.background = element_rect(fill=\"white\")\n    )\np_ctrl\n```\n\n::: {.cell-output-display}\n![Posterior predictive check. Fresh body weight of simulated non-exposed earthworms (blue points). Colored ribbons correspond to the different credibility intervals for the predicted growth for each individual. The thicker black lines represent the predicted body weight.](C_Model_def_sim_data_files/figure-html/fig-postpredVIindctrlsim-1.png){#fig-postpredVIindctrlsim width=864}\n:::\n:::\n\n\n\n\n## Exposed\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_trt <- ggplot()+\n  stat_lineribbon(\n    data = pred[pred$exposition==1,],\n    aes(x = t, y=.prediction^3, color=exposition, group=ID),\n    .width=c(.99,.95,.8,.5),\n    color=\"black\"\n    )+\n  geom_point(\n    data=df_sim[df_sim$exposition==1,], \n    aes(x=t, y=L^3, group=ID), \n    color=\"#380000\", \n    alpha=0.3, \n    size=2.5\n    )+\n  geom_line(\n    data=df_sim[df_sim$exposition==1,], \n    aes(x=t, y=L^3, group=ID), \n    color=\"#380000\", \n    alpha=0.25\n    )+\n  facet_wrap(~ID, ncol=5, nrow=6)+\n  \n  scale_fill_manual(values = rev(pal_red))+\n  \n  labs(y=\"Weight (mg)\", x=\"Time (days)\")+\n  ylim(0, y_max)+\n  scale_x_continuous(\n    limits = c(0, 56),        \n    breaks = seq(0, 56, by = 28),        \n    minor_breaks = seq(0, 56, by = 14)\n  ) +\n  \n  theme_bw()+\n  theme(\n    legend.position = \"right\", \n    title=element_text(size=12, face=\"plain\"), \n    axis.title.x = element_text(face=\"plain\"),\n    strip.background = element_rect(fill=\"white\")\n    )\np_trt\n```\n\n::: {.cell-output-display}\n![Posterior predictive check. Fresh body weight of simulated exposed to the equivalent of 3 RD of Swing® Gold renewed each 28 days (red points). Colored ribbons correspond to the different credibility intervals for the predicted growth for each individual. The thicker black lines represent the predicted body weight.](C_Model_def_sim_data_files/figure-html/fig-postpredVIindtrtsim-1.png){#fig-postpredVIindtrtsim width=864}\n:::\n:::\n\n\n\n:::\n\n#### Comparison of the simulated and estimated parameters values\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_sim_ordered <- df_sim |> arrange(t) |> arrange(as.numeric(ID))\n\ndf_data_pred_obs <- df_pred |>\n  mutate(\n    w_obs = df_sim_ordered$w,\n    ratio_predobs = pred_L_mean^3 / w_obs\n    )\n\nfact_1 <- 1.5\nfact_2 <- 2\n\nseq_line <- seq(1.1, 600, 0.1)\n\ndf_line <- data.frame(\n  x1  = seq_line,\n  y1  = seq_line*fact_1,\n  x_1 = seq_line,\n  y_1 = seq_line/fact_1,\n  x2  = seq_line,\n  y2  = seq_line*fact_2,\n  x_2 = seq_line,\n  y_2 = seq_line/fact_2\n  )\n\nplot_predobs_log <- ggplot()+ \n  \n  geom_line(\n    data=df_line, \n    mapping=aes(x=x1, y=y1), \n    linetype=\"dashed\"\n    )+\n  geom_line(\n    data=df_line, \n    mapping=aes(x=x_1, y=y_1), \n    linetype=\"dashed\"\n    )+\n  geom_line(\n    data=df_line, \n    mapping=aes(x=x2, y=y2), \n    linetype=\"dotted\"\n    )+\n  geom_line(\n    data=df_line, \n    mapping=aes(x=x_2, y=y_2), \n    linetype=\"dotted\"\n    )+\n  geom_abline(intercept=0, slope=1)+\n  geom_pointrange(\n    data = df_data_pred_obs, \n    aes(\n      x=w_obs,\n      y=pred_L_mean^3,\n      ymin=pred_L_Q2.5^3,\n      ymax=pred_L_Q97.5^3, \n      color=Expo\n      ), \n    alpha=0.5\n    )+\n  \n  scale_x_log10(limits=c(1.6, 700))+\n  scale_y_log10(limits=c(1.6, 700))+\n  \n  scale_color_manual(values=rev(pal_col), name=\"\")+\n  scale_fill_manual(values=rev(pal_col), name=\"\")+\n  \n  labs(\n    x=\"Observed weight (mg)\", \n    y=\"Predicted weight (mg)\"\n    )+\n  \n  theme_minimal(24)+\n  theme(legend.position = \"bottom\")\n\nplot_predobs_log\n```\n\n::: {.cell-output-display}\n![Results of the model fit on experimental data. Predicted values are represented with points with their respective credibility interval of 95%. Red points correspond to the predicted value for exposed individuals and blue points for the non exposed individuals. Dashed and dotted lines represent the 1.5-folds and 2-fold changes, respectively. The full line represents the identity line.](C_Model_def_sim_data_files/figure-html/fig-predobsw-1.png){#fig-predobsw width=1152}\n:::\n:::\n\n::: {#tbl-foldpred .cell tbl-cap='Percentage of points in the X-fold change area'}\n\n```{.r .cell-code}\n# Percentage of points in the X-fold change area\nf_fold <- function(fold){\n  res <- length(\n    subset(\n      df_data_pred_obs, \n      ratio_predobs < fold & ratio_predobs > -fold\n      )$w_obs\n    )/length(subset(df_data_pred_obs, !is.na(w_obs))$t)\n  return(res)\n}\n\ndf_fold <- data.frame(fold = c(1.05, 1.075, 1, 1.25, 1.5, 2)) %>%\n  mutate(per = signif(mapply(f_fold, fold),2)*100)\n\ncolnames(df_fold) <- c(\"Fold\", \"Percentage of predictions within\")\n\ndf_fold |> datatable(options = list(dom = 't'), class=\"hover\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-1e2a3a805e68b3e9524f\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-1e2a3a805e68b3e9524f\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"],[1.05,1.075,1,1.25,1.5,2],[82,89,49,99,100,100]],\"container\":\"<table class=\\\"hover\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Fold<\\/th>\\n      <th>Percentage of predictions within<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"t\",\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"Fold\",\"targets\":1},{\"name\":\"Percentage of predictions within\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_delta <- Nord_polar[4]\nfont_size <- 10\nalpha_dens <- 0.6\nalpha_expo <- 0.4\n\nplot_L0_mu <- ggplot(\n  data=subset(df_chains_post_long,Parameter == \"b_L0_Intercept\"),\n  aes(\n    x=value\n    ),\n  color = Nord_polar[1],\n  fill = Nord_polar[1]\n  )+\n  labs(x=bquote(\"Initial structural length \" (mg^{1/3})))+\n  stat_halfeye(\n    adjust=0.5,\n    alpha=alpha_expo\n    )+\n  geom_vline(xintercept = sim_L0_mu, color = Nord_polar[1])+\n\n  scale_color_manual(values=rev(pal_col), name=\"\")+\n  scale_fill_manual(values=rev(pal_col), name=\"\")+\n\n  theme_classic(font_size)+\n  theme(\n    axis.line.y=element_blank(),\n    axis.title.y=element_blank(),\n    axis.ticks.y=element_blank(),\n    axis.text.y=element_blank(),\n    legend.position=\"none\"\n    )\n\nplot_L0_sd <- ggplot(\n  data=subset(df_chains_post_long,Parameter == \"sd_ID__L0_Intercept\"),\n  aes(\n    x=value\n    ),\n  color = Nord_polar[1],\n  fill = Nord_polar[1]\n  )+\n  labs(x=bquote(\"Initial structural length individual variation \" (mg^{1/3})))+\n  stat_halfeye(\n    adjust=0.5,\n    alpha=alpha_expo\n    )+\n  geom_vline(xintercept = sim_L0_sd, color = Nord_polar[1])+\n\n  scale_color_manual(values=rev(pal_col), name=\"\")+\n  scale_fill_manual(values=rev(pal_col), name=\"\")+\n\n  theme_classic(font_size)+\n  theme(\n    axis.line.y=element_blank(),\n    axis.title.y=element_blank(),\n    axis.ticks.y=element_blank(),\n    axis.text.y=element_blank(),\n    legend.position=\"none\",\n      \n    )\n\nplot_res_mu <- ggplot(\n  data=subset(df_chains_post_long,Parameter %in% Param_a_mu),\n  aes(\n    #x=Parameter,\n    x=value,\n    color=exposition,\n    fill=exposition\n    )\n  )+\n  labs(x=bquote(\"Mean growth rate \" (mg^{1/3}/d)))+\n  stat_halfeye(\n    adjust=0.5,\n    alpha=alpha_expo\n    )+\n  geom_vline(xintercept = sim_a_ctrl_mu, color = pal_col[1])+\n  geom_vline(xintercept = sim_a_trt_mu, color = pal_col[2])+\n\n  scale_color_manual(values=rev(pal_col), name=\"\")+\n  scale_fill_manual(values=rev(pal_col), name=\"\")+\n\n  theme_classic(font_size)+\n  theme(\n    axis.line.y=element_blank(),\n    axis.title.y=element_blank(),\n    axis.ticks.y=element_blank(),\n    axis.text.y=element_blank(),\n    legend.position=\"none\",\n    )\n\nplot_res_sd <- ggplot(\n  data=subset(df_chains_post_long,Parameter %in% Param_a_sd),\n  aes(\n    x=value,\n    color=exposition,\n    fill=exposition\n      )\n  )+\n  stat_halfeye(\n    adjust=0.5,\n    alpha=alpha_expo\n    )+\n  geom_vline(xintercept = sim_a_ctrl_sd, color = pal_col[1])+\n  geom_vline(xintercept = sim_a_trt_sd, color = pal_col[2])+\n\n  scale_color_manual(values=rev(pal_col), name=\"\")+\n  scale_fill_manual(values=rev(pal_col), name=\"\")+\n\n  labs(x=bquote(\n    \"Growth rate individual variation \" (mg^{1/3}/d)\n    )\n    )+\n\n  theme_classic(font_size)+\n  theme(\n    axis.line.y=element_blank(),\n    axis.title.y=element_blank(),\n    axis.ticks.y=element_blank(),\n    axis.text.y=element_blank(),\n    legend.position=\"none\"\n    )\n\nplot_LnRR <- ggplot(\n  data=subset(df_chains_post_long,Parameter == \"LnRR\"),\n  aes(\n    x=value\n    ),\n  color = Nord_polar[4],\n  fill = Nord_polar[4]\n  )+\n  labs(x=bquote(\"Mean pesticides effect (LnRR)\"))+\n  stat_halfeye(\n    adjust=0.5,\n    alpha=alpha_expo\n    )+\n  geom_vline(xintercept = sim_LnRR, color = Nord_polar[4])+\n\n  scale_color_manual(values=rev(pal_col), name=\"\")+\n  scale_fill_manual(values=rev(pal_col), name=\"\")+\n\n  theme_classic(font_size)+\n  theme(\n    axis.line.y=element_blank(),\n    axis.title.y=element_blank(),\n    axis.ticks.y=element_blank(),\n    axis.text.y=element_blank(),\n    legend.position=\"none\"\n    )\n\nplot_LnCVi <- ggplot(\n  data=subset(df_chains_post_long,Parameter == \"LnCVi\"),\n  aes(\n    x=value\n    ),\n  color = Nord_polar[4],\n  fill = Nord_polar[4]\n  )+\n  labs(x=bquote(\"Pesticides effect on individual variation (LnCVi)\"))+\n  stat_halfeye(\n    adjust=0.5,\n    alpha=alpha_expo\n    )+\n  geom_vline(xintercept = sim_LnCVi, color = Nord_polar[4])+\n\n  scale_color_manual(values=rev(pal_col), name=\"\")+\n  scale_fill_manual(values=rev(pal_col), name=\"\")+\n\n  theme_classic(font_size)+\n  theme(\n    axis.line.y=element_blank(),\n    axis.title.y=element_blank(),\n    axis.ticks.y=element_blank(),\n    axis.text.y=element_blank(),\n    legend.position=\"none\"\n    )\n\nplot <- plot_L0_mu +plot_L0_sd +plot_res_mu + plot_res_sd + plot_LnRR + plot_LnCVi +\n  plot_layout(ncol=2, guides=\"collect\", heights = c(1, 1, 1))\nplot\n```\n\n::: {.cell-output-display}\n![Comparison of simulated vs predicted parameters values. Vertical lines represent the true values of the simulated population parameters.](C_Model_def_sim_data_files/figure-html/fig-comppredsim-1.png){#fig-comppredsim width=576}\n:::\n:::\n\n\n\n\n@fig-comppredsim shows the posterior distributions of estimated parameters, with vertical black lines indicating the true population values. The results demonstrate good parameter recovery, as the distributions are generally centered around the true values. Estimates for initial structural length, growth rate, and pesticide effects align well with the simulated data, indicating accurate inference.\n\n\n\n\n::: {#tbl-err .cell tbl-cap='Estimation errors on parameters'}\n\n```{.r .cell-code}\ndf_err <- data.frame(\n  Parameter = c(as.list(df_res_VI_show[1])$variable, \"LnRR\", \"LnCVi\"),\n  Simulated = c(sim_L0_mu, sim_a_ctrl_mu, sim_a_trt_mu, sim_L0_sd, sim_a_ctrl_sd, sim_a_trt_sd, sd, sim_LnRR, sim_LnCVi),\n  Predicted = c(as.list(df_res_VI_show[2])$mean, mean(subset(df_chains_post_long, Parameter == \"LnRR\")$value), mean(subset(df_chains_post_long, Parameter == \"LnCVi\")$value))\n)\ndf_err <- df_err |> \n  mutate(\n    Per_error = (Predicted-Simulated)/Simulated*100\n  )\n\ndf_err |> datatable(\n  options = list(\n    dom = 't',\n    columnDefs = list(\n      list(className = 'dt-left', targets = \"_all\")\n      )\n    ),\n  class=\"hover\"\n  ) |>\n  formatRound(columns = 2:length(df_err), digits = 4)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-c404cf398233e2c7d4ad\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-c404cf398233e2c7d4ad\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],[\"b_L0_Intercept\",\"b_a_exposition0\",\"b_a_exposition1\",\"sd_ID__L0_Intercept\",\"sd_ID__a_exposition0\",\"sd_ID__a_exposition1\",\"sigma\",\"LnRR\",\"LnCVi\"],[2.270116949027762,0.07486936910243548,0.06621820243980495,0.4112288318700272,0.007559970739262596,0.009974678529653735,0.1,-0.1227894631591187,0.3999718780960491],[2.2840637695,0.074111805155,0.066567989245,0.40788810815,0.0078017668675,0.009824141066,0.101592260835,-0.1073745828413052,0.3412858605808524],[0.61436572588084,-1.011847644126651,0.5282336159955787,-0.8123758504080431,3.198373863825152,-1.509196143075703,1.592260834999998,-12.55391132204711,-14.67253592791437]],\"container\":\"<table class=\\\"hover\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Parameter<\\/th>\\n      <th>Simulated<\\/th>\\n      <th>Predicted<\\/th>\\n      <th>Per_error<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"t\",\"columnDefs\":[{\"targets\":2,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 4, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":3,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 4, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"targets\":4,\"render\":\"function(data, type, row, meta) {\\n    return type !== 'display' ? data : DTWidget.formatRound(data, 4, 3, \\\",\\\", \\\".\\\", null);\\n  }\"},{\"className\":\"dt-left\",\"targets\":\"_all\"},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"Parameter\",\"targets\":1},{\"name\":\"Simulated\",\"targets\":2},{\"name\":\"Predicted\",\"targets\":3},{\"name\":\"Per_error\",\"targets\":4}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[\"options.columnDefs.0.render\",\"options.columnDefs.1.render\",\"options.columnDefs.2.render\"],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\nParameter recovery is excellent at the population level, with absolute errors below 0.5%, and strong at the individual level, with absolute errors between 4 to 5%.\n\n<button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\">\n\n<b> Session Information </b>\n\n</button>\n\n:::: {#collapseOne .accordion-collapse .collapse}\n<div>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.2.2 (2022-10-31)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS 14.0\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n [1] parallel  grid      stats4    stats     graphics  grDevices utils    \n [8] datasets  methods   base     \n\nother attached packages:\n [1] devtools_2.4.5     usethis_2.2.3      readxl_1.4.3       DT_0.33           \n [5] kableExtra_1.4.0   knitr_1.47         latex2exp_0.9.6    nlstools_2.1-0    \n [9] lsmeans_2.30-0     emmeans_1.10.3     Hmisc_5.1-3        car_3.1-2         \n[13] carData_3.0-5      modelsummary_2.2.0 extrafont_0.19     gridExtra_2.3     \n[17] ggpubr_0.6.0       plotly_4.10.4      ggtext_0.1.2       ggbreak_0.1.2     \n[21] cowplot_1.1.3      patchwork_1.2.0    ggdist_3.3.2       nord_1.0.0        \n[25] RColorBrewer_1.1-3 wesanderson_0.3.7  viridis_0.6.5      viridisLite_0.4.2 \n[29] ggthemes_5.1.0     see_0.8.4.3        report_0.5.8       parameters_0.22.2 \n[33] performance_0.12.0 modelbased_0.8.8   insight_0.20.4     effectsize_0.8.8  \n[37] datawizard_0.11.0  correlation_0.8.5  bayestestR_0.13.2  easystats_0.7.2   \n[41] deSolve_1.40       priorsense_1.0.4   truncnorm_1.0-9    tmvtnorm_1.6      \n[45] gmm_1.8            sandwich_3.1-0     Matrix_1.6-5       mvtnorm_1.2-5     \n[49] fdrtool_1.2.17     tidybayes_3.0.6    ggmcmc_1.5.1.1     glmmTMB_1.1.9     \n[53] rstan_2.32.6       StanHeaders_2.32.9 cmdstanr_0.8.0     brms_2.22.0       \n[57] Rcpp_1.0.12        plan_0.4-5         reshape2_1.4.4     lubridate_1.9.3   \n[61] forcats_1.0.0      stringr_1.5.1      dplyr_1.1.4        purrr_1.0.2       \n[65] readr_2.1.5        tidyr_1.3.1        tibble_3.2.1       ggplot2_3.5.1     \n[69] tidyverse_2.0.0    here_1.0.1        \n\nloaded via a namespace (and not attached):\n  [1] utf8_1.2.4           tidyselect_1.2.1     lme4_1.1-31         \n  [4] htmlwidgets_1.6.4    munsell_0.5.1        ragg_1.3.2          \n  [7] codetools_0.2-20     miniUI_0.1.1.1       withr_3.0.0         \n [10] Brobdingnag_1.2-9    colorspace_2.1-0     tables_0.9.28       \n [13] rstudioapi_0.16.0    ggsignif_0.6.4       Rttf2pt1_1.3.12     \n [16] bayesplot_1.11.1     labeling_0.4.3       farver_2.1.2        \n [19] bridgesampling_1.1-2 rprojroot_2.0.4      coda_0.19-4.1       \n [22] vctrs_0.6.5          generics_0.1.3       TH.data_1.1-2       \n [25] xfun_0.45            timechange_0.3.0     markdown_1.13       \n [28] R6_2.5.1             cachem_1.1.0         gridGraphics_0.5-1  \n [31] promises_1.3.0       scales_1.3.0         multcomp_1.4-25     \n [34] nnet_7.3-19          gtable_0.3.5         processx_3.8.4      \n [37] rlang_1.1.4          systemfonts_1.1.0    splines_4.2.2       \n [40] rstatix_0.7.2        extrafontdb_1.0      TMB_1.9.11          \n [43] lazyeval_0.2.2       broom_1.0.6          checkmate_2.3.1     \n [46] inline_0.3.19        yaml_2.3.8           abind_1.4-5         \n [49] crosstalk_1.2.1      backports_1.5.0      httpuv_1.6.15       \n [52] gridtext_0.1.5       tensorA_0.36.2.1     tools_4.2.2         \n [55] ggplotify_0.1.2      ellipsis_0.3.2       jquerylib_0.1.4     \n [58] posterior_1.6.0      sessioninfo_1.2.2    plyr_1.8.9          \n [61] base64enc_0.1-3      ps_1.7.6             rpart_4.1.23        \n [64] urlchecker_1.0.1     zoo_1.8-12           cluster_2.1.6       \n [67] fs_1.6.4             magrittr_2.0.3       data.table_1.15.4   \n [70] matrixStats_1.3.0    pkgload_1.4.0        mime_0.12           \n [73] hms_1.1.3            evaluate_0.24.0      arrayhelpers_1.1-0  \n [76] xtable_1.8-4         rstantools_2.4.0     compiler_4.2.2      \n [79] V8_4.4.2             minqa_1.2.7          htmltools_0.5.8.1   \n [82] later_1.3.2          ggfun_0.1.6          mgcv_1.9-1          \n [85] tzdb_0.4.0           Formula_1.2-5        aplot_0.2.3         \n [88] RcppParallel_5.1.7   MASS_7.3-58.1        boot_1.3-30         \n [91] cli_3.6.3            pkgconfig_2.0.3      numDeriv_2016.8-1.1 \n [94] foreign_0.8-87       xml2_1.3.6           svUnit_1.0.6        \n [97] svglite_2.1.3        bslib_0.7.0          QuickJSR_1.2.2      \n[100] ggstats_0.6.0        estimability_1.5.1   yulab.utils_0.1.7   \n[103] distributional_0.4.0 digest_0.6.36        cellranger_1.1.0    \n[106] rmarkdown_2.27       htmlTable_2.4.2      curl_5.2.1          \n[109] commonmark_1.9.1     shiny_1.8.1.1        nloptr_2.0.3        \n[112] lifecycle_1.0.4      nlme_3.1-160         jsonlite_1.8.8      \n[115] fansi_1.0.6          pillar_1.9.0         lattice_0.22-6      \n[118] loo_2.8.0            GGally_2.2.1         fastmap_1.2.0       \n[121] httr_1.4.7           pkgbuild_1.4.4       survival_3.7-0      \n[124] remotes_2.5.0        glue_1.7.0           sass_0.4.9          \n[127] profvis_0.3.8        stringi_1.8.4        textshaping_0.4.0   \n[130] memoise_2.0.1       \n```\n\n\n:::\n:::\n\n\n\n\n</div>\n::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}